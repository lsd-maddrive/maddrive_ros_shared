diff --git a/viso2_ros/CMakeLists.txt b/viso2_ros/CMakeLists.txt
index 225ea9a..08d9c9a 100755
--- a/viso2_ros/CMakeLists.txt
+++ b/viso2_ros/CMakeLists.txt
@@ -1,4 +1,4 @@
-cmake_minimum_required(VERSION 2.8.3)
+cmake_minimum_required(VERSION 3.5.0)
 project(viso2_ros)
 
 find_package(catkin REQUIRED COMPONENTS
@@ -16,115 +16,16 @@ find_package(catkin REQUIRED COMPONENTS
   message_generation
 )
 
-set(OPENCV_ENABLE_NONFREE "Enable non-free algorithms" TRUE)
-set(OpenCV_INCLUDE_DIRS
-  /usr/local/include
-  /usr/local/include/opencv2
-)
-
-set(OpenCV_LIB_DIR
-  /usr/local/lib
-)
-
-set(OpenCV_LIBS
-  opencv_calib3d
-  opencv_core
-  opencv_features2d
-  opencv_flann
-  opencv_highgui
-  opencv_imgcodecs
-  opencv_imgproc
-  opencv_ml
-  opencv_objdetect
-  opencv_photo
-  opencv_shape
-  opencv_stitching
-  opencv_superres
-  opencv_video
-  opencv_videoio
-  opencv_videostab
-  opencv_viz
-  opencv_aruco
-  opencv_bgsegm
-  opencv_bioinspired
-  opencv_ccalib
-  opencv_datasets
-  opencv_dpm
-  opencv_face
-  opencv_freetype
-  opencv_fuzzy
-  opencv_hdf
-  opencv_line_descriptor
-  opencv_optflow
-  opencv_phase_unwrapping
-  opencv_plot
-  opencv_reg
-  opencv_rgbd
-  opencv_saliency
-  opencv_stereo
-  opencv_structured_light
-  opencv_surface_matching
-  opencv_text
-  opencv_ximgproc
-  opencv_xobjdetect
-  opencv_xphoto
- opencv_xfeatures2d
-)
-
-set(OpenCV_LIBRARIES
-  opencv_calib3d
-  opencv_core
-  opencv_features2d
-  opencv_flann
-  opencv_highgui
-  opencv_imgcodecs
-  opencv_imgproc
-  opencv_ml
-  opencv_objdetect
-  opencv_photo
-  opencv_shape
-  opencv_stitching
-  opencv_superres
-  opencv_video
-  opencv_videoio
-  opencv_videostab
-  opencv_viz
-  opencv_aruco
-  opencv_bgsegm
-  opencv_bioinspired
-  opencv_ccalib
-  opencv_datasets
-  opencv_dpm
-  opencv_face
-  opencv_freetype
-  opencv_fuzzy
-  opencv_hdf
-  opencv_line_descriptor
-  opencv_optflow
-  opencv_phase_unwrapping
-  opencv_plot
-  opencv_reg
-  opencv_rgbd
-  opencv_saliency
-  opencv_stereo
-  opencv_structured_light
-  opencv_surface_matching
-  opencv_text
-  opencv_ximgproc
-  opencv_xobjdetect
-  opencv_xphoto
- opencv_xfeatures2d
-)
+find_package(OpenCV REQUIRED)
+message("OpenCV version: " ${OpenCV_VERSION})
 
+message("OpenCV_INCLUDE_DIRS = ${OpenCV_INCLUDE_DIRS}")
+message("OpenCV_LIBRARY_DIRS = ${OpenCV_LIBRARY_DIRS}")
+message("OpenCV_LIBS = ${OpenCV_LIBS}")
+message("OpenCV_LIBRARIES = ${OpenCV_LIBRARIES}")
 
+message("Catkin includes = ${catkin_INCLUDE_DIRS}")
 
-#find_package(OpenCV REQUIRED)
-message(STATUS "OpenCV_INCLUDE_DIRS = ${OpenCV_INCLUDE_DIRS}")
-message(STATUS "OpenCV_LIB_DIR = ${OpenCV_LIB_DIR}")
-message(STATUS "OpenCV_LIBS = ${OpenCV_LIBS}")
-message(STATUS "OpenCV_LIBRARIES = ${OpenCV_LIBRARIES}")
-
-include_directories(${OpenCV_INCLUDE_DIRS})
 link_directories(${OpenCV_LIBRARY_DIRS})
 
 
@@ -148,7 +49,7 @@ else(ARM_CROSS_COMPILATION)
   add_definitions(-msse3)
 endif(ARM_CROSS_COMPILATION)
 
-include_directories(src ${libviso2_INCLUDE_DIRS} ${catkin_INCLUDE_DIRS} ${OpenCV_INCLUDE_DIRS})
+include_directories(${OpenCV_INCLUDE_DIRS} src ${libviso2_INCLUDE_DIRS} ${catkin_INCLUDE_DIRS})
 
 add_executable(stereo_odometer src/stereo_odometer.cpp)
 add_dependencies(stereo_odometer ${catkin_EXPORTED_TARGETS})
@@ -166,21 +67,16 @@ add_executable(testORB src/testORB.cpp) # BMNF(04/01/2021): MODIFIED
 add_dependencies(testORB ${catkin_EXPORTED_TARGETS}) # BMNF(04/01/2021): MODIFIED 
 add_dependencies(testORB ${PROJECT_NAME}_gencpp) # BMNF(04/01/2021): MODIFIED 
 
-add_executable(testSIFT src/testSIFT.cpp) # BMNF(30/11/2020): NEW 
-add_dependencies(testSIFT ${catkin_EXPORTED_TARGETS}) # BMNF(30/11/2020): NEW 
-add_dependencies(testSIFT ${PROJECT_NAME}_gencpp) # BMNF(30/11/2020): NEW 
+# add_executable(testSIFT src/testSIFT.cpp) # BMNF(30/11/2020): NEW 
+# add_dependencies(testSIFT ${catkin_EXPORTED_TARGETS}) # BMNF(30/11/2020): NEW 
+# add_dependencies(testSIFT ${PROJECT_NAME}_gencpp) # BMNF(30/11/2020): NEW 
 
 target_link_libraries(stereo_odometer ${OpenCV_LIBRARIES} ${catkin_LIBRARIES})
-find_package(Boost REQUIRED COMPONENTS signals thread)
+find_package(Boost REQUIRED COMPONENTS thread)
 include_directories(${Boost_INCLUDE_DIRS})
 target_link_libraries(stereo_odometer ${Boost_LIBRARIES} ${catkin_LIBRARIES})
 target_link_libraries(mono_odometer ${OpenCV_LIBRARIES} ${catkin_LIBRARIES})
 target_link_libraries(mono_odometer_omnidirectional ${OpenCV_LIBRARIES} ${catkin_LIBRARIES})
-target_link_libraries(testORB ${OpenCV_LIB} ${catkin_LIBRARIES}) # BMNF(16/11/2020): MODIFIED
-target_link_libraries(testSIFT ${OpenCV_LIB} ${OpenCV_LIBRARIES} ${catkin_LIBRARIES}) # BMNF(30/11/2020): NEW
-
-
-
-
-
+target_link_libraries(testORB ${OpenCV_LIBRARIES} ${catkin_LIBRARIES}) # BMNF(16/11/2020): MODIFIED
+# target_link_libraries(testSIFT ${OpenCV_LIBRARIES} ${catkin_LIBRARIES}) # BMNF(30/11/2020): NEW
 
diff --git a/viso2_ros/src/testORB.cpp b/viso2_ros/src/testORB.cpp
index ce96dae..dd419de 100755
--- a/viso2_ros/src/testORB.cpp
+++ b/viso2_ros/src/testORB.cpp
@@ -146,10 +146,10 @@ void imageCallback(const sensor_msgs::ImageConstPtr& l_image_msg, const sensor_m
         }
 
         // It's not possible to apply only RANSAC... So we can compute the homography using RANSAC and thus obtain the matches already filtered by RANSAC.
-        left_H = cv::findHomography(left_obj, left_scene, CV_RANSAC, 3.0, left_RANSACinliersMask) ;
-        previous_H = cv::findHomography(previous_obj, previous_scene, CV_RANSAC, 3.0, previous_RANSACinliersMask) ;
-        right_H = cv::findHomography(right_obj, right_scene, CV_RANSAC, 3.0, right_RANSACinliersMask) ;
-        current_H = cv::findHomography(current_obj, current_scene, CV_RANSAC, 3.0, current_RANSACinliersMask) ;
+        left_H = cv::findHomography(left_obj, left_scene, cv::RANSAC, 3.0, left_RANSACinliersMask) ;
+        previous_H = cv::findHomography(previous_obj, previous_scene, cv::RANSAC, 3.0, previous_RANSACinliersMask) ;
+        right_H = cv::findHomography(right_obj, right_scene, cv::RANSAC, 3.0, right_RANSACinliersMask) ;
+        current_H = cv::findHomography(current_obj, current_scene, cv::RANSAC, 3.0, current_RANSACinliersMask) ;
 
         left_good_inliers = (int)cv::sum(left_RANSACinliersMask)[0] ;
         previous_good_inliers = (int)cv::sum(previous_RANSACinliersMask)[0] ;
diff --git a/viso2_ros/src/testSIFT.cpp b/viso2_ros/src/testSIFT.cpp
index bee48aa..fd7994c 100755
--- a/viso2_ros/src/testSIFT.cpp
+++ b/viso2_ros/src/testSIFT.cpp
@@ -21,16 +21,16 @@
 #include <opencv2/objdetect.hpp>
 #include <opencv2/features2d.hpp>
 #include "opencv2/calib3d.hpp"
-#include <opencv2/xfeatures2d/nonfree.hpp>
+// #include <opencv2/xfeatures2d/nonfree.hpp>
 
 using std::vector ;
 
+using namespace cv;
+
 using cv::Mat ;
 using cv::Ptr ;
 using cv::KeyPoint ;
-
-using cv::ORB ;
-using cv::xfeatures2d::SIFT ;
+using cv::SIFT ;
 
 using namespace sensor_msgs;
 using namespace message_filters;    
@@ -199,10 +199,10 @@ void imageCallback(const sensor_msgs::ImageConstPtr& l_image_msg, const sensor_m
             // Obtaining homograpghy to apply RANSAC
             try{
 
-                left_H = cv::findHomography(left_obj, left_scene, CV_RANSAC, 3.0, left_RANSACinliersMask) ;
-                previous_H = cv::findFundamentalMat(previous_obj, previous_scene, previous_RANSACinliersMask, CV_RANSAC, 3.f) ;
-                right_H = cv::findHomography(right_obj, right_scene, CV_RANSAC, 3.0, right_RANSACinliersMask) ;
-                current_H = cv::findFundamentalMat(current_obj, current_scene, current_RANSACinliersMask, CV_RANSAC, 3.f) ;
+                left_H = cv::findHomography(left_obj, left_scene, cv::RANSAC, 3.0, left_RANSACinliersMask) ;
+                previous_H = cv::findFundamentalMat(previous_obj, previous_scene, previous_RANSACinliersMask, cv::RANSAC, 3.f) ;
+                right_H = cv::findHomography(right_obj, right_scene, cv::RANSAC, 3.0, right_RANSACinliersMask) ;
+                current_H = cv::findFundamentalMat(current_obj, current_scene, current_RANSACinliersMask, cv::RANSAC, 3.f) ;
 
             } catch (cv::Exception& e) {
 
